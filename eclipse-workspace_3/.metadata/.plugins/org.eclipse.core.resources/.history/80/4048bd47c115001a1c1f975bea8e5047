package com.javainterviewpoint;

import java.sql.Connection;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

import com.google.gson.Gson;

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

@Controller
public class AppController
{
	
	 @GetMapping({"/", "/index"})
	 public String showWelcomePage()
	 {
		 return "index";
	 }
	 
	 @RequestMapping(value = "/data", produces = MediaType.APPLICATION_JSON_VALUE)
	 @ResponseBody
	 public StreamingResponseBody getData()
	 {

		 String connectionUrl =
	                "jdbc:sqlserver://localhost\\SQLEXPRESS01:1433;"
	                + "databaseName=loveadmin_test;"
	                + "username=Alex;"
	                + "password=alex01";

		 ResultSet resultSet = null;
		 Connection connection = null;

	 	try
	 	{
	 		connection = DriverManager.getConnection(connectionUrl);
            Statement statement = connection.createStatement();
	 		
	        String selectSql = "select first_name, last_name, product_name, description, price, currency, quantity, purchase_date, id from user_product_purchases";
	        resultSet = statement.executeQuery(selectSql);
	        final ResultSet fixed = resultSet;
	        
	        while (fixed.next())
	        {
	        	int j = 0;
	        }
	        
	        return new StreamingResponseBody() 
	        {
	            @Override
	            public void writeTo(OutputStream out) throws IOException 
	            {
	            	Gson gson = new Gson();
	            	try 
	            	{
						while (fixed.next())
						{
							String[] row = new String[9];
							for (int i = 1; i == 9; i++)
							{
								row[i] = fixed.getString(i);
							}
							out.write((gson.toJson(row)+"|").getBytes());
							out.flush();
						}
					} 
	            	catch (SQLException e) 
	            	{
						e.printStackTrace();
						closeConnection(connection);
					}
					/*
					 * for (int i = 0; i < 500; i++) { int[] row = new int[] {i, i, i};
					 * out.write((gson.toJson(row)+"|").getBytes());
					 * //out.write((i+", ").getBytes()); out.flush(); try { Thread.sleep(5); } catch
					 * (InterruptedException e) { e.printStackTrace(); } }
					 */
	            }
	        };       
	        
        }
        catch (SQLException e) 
	 	{
            e.printStackTrace();
            closeConnection(connection);
        }

	 	return null;
	 }

	private void closeConnection(Connection connection)
	{
		if (connection == null) return;
		try 
		{
			connection.close();
		} catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
}  
